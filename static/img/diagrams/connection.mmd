sequenceDiagram

participant HttpServer
participant ServerBuilder
participant mio
participant Accept
participant WorkerClient
participant Worker
participant StreamService
participant HttpServiceHandler
participant Dispatcher
participant Tokio

Note over StreamService: (token, web::App)


HttpServer-->>HttpServiceHandler: eventually build...

ServerBuilder-->>Accept: start(socks, workers)
loop Continuous: poll
	Accept-->>mio: mio::Poll::poll()
	alt poll() -> TIMER | CMD
		Accept-->>Accept: process_*
	else poll() -> NOTIFY
		Accept-->>Accept: backpressure
	else poll() -> OTHER(token)
		Accept-->>Accept: accept_one(Conn)
		loop until WorkerClient::send(Conn).is_ok()
			Accept-->>WorkerClient: send(Conn)
			WorkerClient-->>Accept: Err(_)
			Accept-->>ServerBuilder: worker_faulted(idx)
			Accept-->>Accept: remove worker, get next worker
		end
	end
end

Tokio-->>Worker: poll()
alt WorkerState::Available
	loop
		Worker-->>WorkerClient: rx.poll_next()
		WorkerClient-->>Worker: WorkerCommand(Conn)
		Worker-->>Worker: check_readiness
		alt Ok(true)
			Note over Worker,StreamService: Worker::services[Conn.token]
			Worker-->>StreamService: call(ServerMessage::Connect(stream))
			StreamService-->>HttpServiceHandler: call(stream)
			activate HttpServiceHandler
				Tokio-->>HttpServiceHandler: poll()
				HttpServiceHandler-->>Dispatcher: new(stream)
				Note over HttpServiceHandler: handle connection
				Tokio-->>Dispatcher: poll()
			deactivate HttpServiceHandler

		else Ok(false)
			Worker-->>Worker: WorkerState::Unavailable
		else Err(token,idx)
			Worker-->>Worker: WorkerState::Restarting
		end
	end
end